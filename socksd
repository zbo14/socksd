#!/bin/bash -e

DIR=$(dirname "$(readlink $0)")
cd $DIR

case $1 in
  add-proxy)
    if [[ -z $PUBKEY ]]
    then
      echo "Usage: PUBKEY=\"\" socksd <add-proxy>"
      exit
    fi

    echo $PUBKEY >> root/.ssh/authorized_keys
    ;;

  build)
    docker build --no-cache -t socksd .
    ;;

  get-key)
    cat root/.ssh/id_ed25519.pub
    ;;

  get-proxies)
    cat root/.ssh/authorized_keys
    ;;

  init)
    mkdir -p root{,/.ssh}
    touch root/.ssh/authorized_keys
    ssh-keygen -t ed25519 -f root/.ssh/id_ed25519 -N ''
    ;;

  rm-proxy)
    if [[ -z $USER ]]
    then
      echo "Usage: USER=\"\" socksd <rm-proxy>"
      exit
    fi

    grep -v $USER root/.ssh/authorized_keys > root/.ssh/authorized_keys
    ;;

  start)
    if [[ -z $PORT ]]
    then
      echo "Usage: PORT=\"\" socksd <start>"
      exit
    fi

    docker run \
      -d \
      -e PORT=$PORT \
      --name socksd \
      -p $PORT:$PORT \
      --restart=always \
      -v $DIR/root/.ssh:/root/.ssh:ro \
      socksd

    docker exec -it socksd passwd socksproxy
    ;;

  stop)
    docker rm -fv socksd
    ;;

  *)
    echo $'Usage: socksd <command> ARGS

Commands:
  add-proxy     Add a proxy\'s public key to the authorized_keys file
  build         Build the Docker image
  get-key       Print the daemon\'s public key
  get-proxies   Print the authorized_keys file
  init          Setup directory structure and SSH keys
  rm-proxy      Remove a proxy\'s public key from the authorized_keys file
  start         Start a Docker container running the daemon
  stop          Stop the Docker container, remove it and the volumes'
    ;;
esac
