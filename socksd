#!/bin/bash -e

DIR=$(dirname "$(readlink $0)")
cd $DIR

case $1 in
  add-proxy)
    if [[ -z $PUBKEY ]]
    then
      echo "Usage: PUBKEY= socksd <add-proxy>"
      exit
    fi

    echo $PUBKEY >> home/socksproxy/.ssh/authorized_keys
    ;;

  build)
    docker build --no-cache -t socksd .
    ;;

  get-key)
    cat root/.ssh/id_ed25519.pub
    ;;

  get-proxies)
    cat home/socksproxy/.ssh/authorized_keys
    ;;

  init)
    mkdir -p {home{,/socksproxy{,/.ssh}},root{,/.ssh}}
    touch home/socksproxy/.ssh/authorized_keys
    ssh-keygen -t ed25519 -f root/.ssh/id_ed25519 -N ''
    ;;

  rm-proxy)
    if [[ -z $PUBKEY ]]
    then
      echo "Usage: PUBKEY= socksd <rm-proxy>"
      exit
    fi

    grep -v $PUBKEY home/socksproxy/.ssh/authorized_keys > other_keys
    mv other_keys home/socksproxy/.ssh/authorized_keys
    ;;

  start)
    if [[ -z $PORT ]]
    then
      echo "Usage: PORT= socksd <start>"
      exit
    fi

    docker run \
      -d \
      -e PORT=$PORT \
      --init \
      --name socksd \
      -p $PORT:$PORT \
      --restart=always \
      -v $DIR/home/socksproxy/.ssh:/home/socksproxy/.ssh \
      -v $DIR/root/.ssh:/root/.ssh:ro \
      socksd

    docker exec -it socksd passwd socksproxy
    ;;

  stop)
    docker rm -fv socksd
    ;;

  *)
    echo $'Usage: [ARG1= ARG2= ...] socksd <command>

Commands:
  add-proxy     Add a proxy\'s public key to the authorized_keys file
  build         Build the Docker image
  get-key       Print the daemon\'s public key
  get-proxies   Print the contents of the authorized_keys file
  init          Create directories with the SSH keys and authorized_keys file
  rm-proxy      Remove a proxy\'s public key from the authorized_keys file
  start         Start a Docker container running the daemon
  stop          Remove the Docker container and its volumes'
    ;;
esac
